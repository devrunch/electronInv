// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "./generated/remote"
}

datasource db {
  provider = "postgresql"
  url      =  "postgresql://postgres:root@52.66.255.221:5432/srijiinventory"

}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String // "admin" or "employee"
  createdAt DateTime @default(now())

  inventoryLogs InventoryLog[]
}

model Inventory {
  id             Int      @id @default(autoincrement())
  sku            String   @unique
  name           String
  quantity       Int      @default(0)
  lowerThreshold Int      @default(5) // Prevents stock running too low
  upperThreshold Int      @default(100) // Prevents overstocking
  lastUpdated    DateTime @updatedAt // Auto-updates on change
  supplierId     Int?
  price          Float    @default(0)

  supplier      Supplier?      @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  dosages       Dosage[]
  inventoryLogs InventoryLog[]
  PurchaseItem  PurchaseItem[]
}

model MedicalHistory {
  id          Int      @id @default(autoincrement())
  patientId   Int
  description String
  diagnosis   String
  treatment   String
  doctor      String
  createdAt   DateTime @default(now())

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Patient {
  id               Int      @id @default(autoincrement())
  firstName        String
  lastName         String
  dob              DateTime
  gender           Gender
  contactInfo      String   @unique
  emergencyContact String
  createdAt        DateTime @default(now())

  medicalHistories MedicalHistory[]
  prescriptions    Prescription[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Dosage {
  id             Int    @id @default(autoincrement())
  prescriptionId Int
  sku            String
  quantity       Int    @default(0)
  frequency      String

  prescription Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  inventory    Inventory    @relation(fields: [sku], references: [sku], onDelete: Cascade)
}

model Prescription {
  id             Int      @id @default(autoincrement())
  patientId      Int
  prescriptionID String   @unique @default(cuid())
  startDate      DateTime
  endDate        DateTime
  doctor         String
  createdAt      DateTime @default(now())
  disease        String   @default("")

  dosages Dosage[]
  patient Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Supplier {
  id        Int         @id @default(autoincrement())
  name      String
  contact   String
  email     String      @unique
  address   String
  createdAt DateTime    @default(now())
  inventory Inventory[]
  Purchase  Purchase[]
}

model InventoryLog {
  id          Int       @id @default(autoincrement())
  inventoryId String
  userId      String
  type        LogType // IN or OUT
  quantity    Int
  createdAt   DateTime  @default(now())
  synced      Boolean   @default(false)
  inventory   Inventory @relation(fields: [inventoryId], references: [sku], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [username], onDelete: Cascade)
}

model Purchase {
  id           Int      @id @default(autoincrement())
  purchaseId   String   @unique @default(cuid())
  supplierMail String
  createdAt    DateTime @default(now())

  supplier      Supplier       @relation(fields: [supplierMail], references: [email], onDelete: Cascade)
  purchaseItems PurchaseItem[]
}

model PurchaseItem {
  id          Int    @id @default(autoincrement())
  purchaseId  String
  inventoryId String
  quantity    Int    @default(1)
  costPrice   Float  @default(0)

  purchase  Purchase  @relation(fields: [purchaseId], references: [purchaseId], onDelete: Cascade)
  inventory Inventory @relation(fields: [inventoryId], references: [sku], onDelete: Cascade)
}

enum LogType {
  IN
  OUT
  UPDATE
  CREATE
  DELETE
}
